#### Features summaries files to use

**20201218_184325**: feature summaries have 3016 features (without dorsal-ventral features) with short, matlab-friendly names. 
**20210112_105808**: feature summaries have 3016 features (without dorsal-ventral features) with short, matlab-friendly names; filtered with worm size criteria. Use for most purposes.
**2021xxxxxxxxxxx**: feature summaries have 3016 features (without dorsal-ventral features) with short, matlab-friendly names; filtered with worm size criteria; generated for various windows around bluelight stimulation. Use for analysing bluelight videos.


# Useful scripts

`generateFeatSummary`: First script to run. Combines Tierpsy tables with metadata table to generate a combined *FeatureTable* used for downstream analysis. 
`doPCA: Script performs PCA analysis, with options to specify which features, which strains, and which light conditions to use. 
`classifySpecies`: Script uses supervised machine learning algorithms to train classifiers for a specified variable based on extracted Tierpsy features. It also has the option to apply sequantial feature selection to identify top features to use for classification.
`plotFeatAcrossights`: Script plots selected timeseries features across the three light conditions.
`plotTraj`: Script visualises full frame trajectories from an entire camera view (4x4 wells).

# Under development

`
`analyzeBlueLightSensitivity`: Script analyzes bluelight sensitivity by looking at significant feature changes, including motion state


# Useful functions

`loadLatestFeatureTable`: loads the latest *featureTable*, because these get updated all the time as new features are added.
`extractHDLocation`: finds which 40 worm files are on which HD and appends the information to *featureTable* under *onHD1* heading. Because the full dataset is spread over two HD's. 
`appendFeatsToFeatureTable`: appends new features from *newFeatureTable* to the existing *featureTable*.
`preprocessFeatMat`: pro-processes features matrix with several steps such as dropping features with zero standard deviation or too many NaN's, imputing nan values to global mean, and z-normalising feature matrix.
`filterFeatureTable`: filters *featureTable* by specified strain and feature requirements before classification tasks. Uses `dropFeats` and `dropStrains`.
`balanceStrainReps`: subsamples replicates to ensure that all strains are balanced in the number of replicates represented in a classification task.
`cvpartition_augmented`: divides augmented features up into training and test datasets, so that one entire replicate is held out so it is not at all seen in training.